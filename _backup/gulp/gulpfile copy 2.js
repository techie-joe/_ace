// ===============================================================
// This is the gulper task definitions.
// - telling gulper how to build the project.
// Find more information about Gulp on http://gulpjs.com
// ===============================================================
// To list available tasks, run: > gulp --tasks
// ===============================================================
// IMPORTS
// ===============================================================

const { src, dest, series, parallel, watch } = require('gulp');
const pug = require('gulp-pug'); // pug
const gulp_file = require('gulp-file'); // to generate files
const sass = require("gulp-sass")(require("sass")); // sass
const cleanCSS = require('gulp-clean-css'); // clean css
const gulp_rename = require('gulp-rename'); // name file extension

// ===============================================================
// GULPER
// ===============================================================

function getGulper(o) {

  const {
    watchOpt,
    watchList,
    buildList,
    outputList,
    sassOpt,
  } = o;

  // -------------------------------------------------------------
  // generate files
  // -------------------------------------------------------------

  // generate .htaccess file to _dest
  // { src: true } indicates that the string provided as the second
  // argument should be treated as file contents rather than a path
  function htaccess() {
    const _htaccess = [
      '# This file is generated by gulpfile.js',
      `ErrorDocument 403 ${_dest_url}403.html`,
      `ErrorDocument 404 ${_dest_url}404.html`,
      `ErrorDocument 500 ${_dest_url}500.html`,
    ].join(`\n`);
    return gulp_file( '.htaccess', _htaccess, { src: true } )
    .pipe(dest(_dest.site));
  }

  // generate manifest file from _src to _dest
  function manifest() {
    const _manifest = JSON.stringify(require(_src_manifest), null, 2);
    return gulp_file( 'manifest.json', _manifest, { src: true } )
    .pipe(dest(_dest.site));
  }
 
  // -------------------------------------------------------------
  // files: all types
  // : to copy all types of files from _src to _dest
  // -------------------------------------------------------------
  function _files(_src,_dest) {
    return src(_src, { dot: true })
    .pipe(dest(_dest));
  }

  function files() {
    return _files(buildList.files,outputList.files);
  }

  function files_w() {
    return _files(watchList.files,outputList.files);
  }

  // -------------------------------------------------------------
  // pages: html, php, txt and md
  // -------------------------------------------------------------
  // : to take pug files from _src to _dest
  // : retain the same directory structure

  function _html(_src,_dest) {
    return src(_src)
    .pipe(pug({ pretty: true }))
    .pipe(ext('.html'))
    .pipe(dest(_dest));
  }

  function _php(_src,_dest) {
    return src(_src)
    .pipe(pug({ pretty: true }))
    .pipe(ext('.php'))
    .pipe(dest(_dest));
  }

  function _txt(_src,_dest) {
    return src(_src)
    .pipe(pug())
    .pipe(ext('.txt'))
    .pipe(dest(_dest));
  }

  function _md(_src,_dest) {
    return src(_src)
    .pipe(pug())
    .pipe(ext('.md'))
    .pipe(dest(_dest));
  }

  function html() {
    return _html(buildList.pages.html, outputList.pages);
  }

  function php() {
    return _php(buildList.pages.php, outputList.pages);
  }

  function txt() {
    return _txt(buildList.pages.txt, outputList.pages);
  }

  function md() {
    return _md(buildList.pages.md, outputList.pages);
  }

  function html_w() {
    return _html(watchList.pages.html, outputList.pages);
  }

  function php_w() {
    return _php(watchList.pages.php, outputList.pages);
  }

  function txt_w() {
    return _txt(watchList.pages.txt, outputList.pages);
  }

  function md_w() {
    return _md(watchList.pages.md, outputList.pages);
  }

  // -------------------------------------------------------------
  // css
  // -------------------------------------------------------------
  // to take scss files from _src to _dest
  function _css(_src,_dest) {
    return src(_src)
      .pipe(sass(sassOpt).on("error", sass.logError))
      .pipe(cleanCSS())
      .pipe(dest(_dest));
  }

  function css() {
    return _css(buildList.assets.scss, outputList.css);
  }

  function css_w() {
    return _css(watchList.assets.scss, outputList.css);
  }

  // -------------------------------------------------------------
  // js
  // -------------------------------------------------------------
  // to copy js files from _src to _dest
  function _js(_src, _dest) {
    return src(_src)
      .pipe(dest(_dest));
  }

  function js() {
    return _js(buildList.assets.js, outputList.js);
  }

  function js_w() {
    return _js(watchList.assets.js, outputList.js);
  }

  function _watch(_src, fn) {
    if (_src && _src.length > 0) { watch(_src, watchOpt, fn); }
  }
  function watchPages() {
    _watch(watchList.pages.html, html_w);
    _watch(watchList.pages.php, php_w);
    _watch(watchList.pages.txt, txt_w);
    _watch(watchList.pages.md, md_w);
  }
  function watchAssets() {
    _watch(watchList.assets.scss, css_w);
    _watch(watchList.assets.js, js_w);
  }
  function watchFiles() {
    _watch(watchList.files, files_w);
  }
  return {
    buildPages: parallel(
      html, php, txt, md,
    ),
    buildAssets: parallel(
      css, js,
    ),
    buildFiles: parallel(
      builder_txt, builder_md,
      htaccess, manifest, files,
    ),
    watchPages,
    watchAssets,
    watchFiles,
  }
}

// ---------------------------------------------------------------
// ace
// ---------------------------------------------------------------

const ace = getGulper({
  watchOpt: { ignoreInitial: false },
  watchList: {
    pages,
    assets,
    files,
  },
  buildList: {
    pages,
    assets,
    files,
  },
  outputList: {

  },
  // outputStyle: compressed | expanded
  sassOpt: { outputStyle: 'compressed' }
});

// ---------------------------------------------------------------
// > gulp ace
// ---------------------------------------------------------------

exports.ace_pages = ace.buildPages;
exports.ace_assets = ace.buildAssets;
exports.ace_files = ace.buildFiles;

// ---------------------------------------------------------------
// menu
// ---------------------------------------------------------------

const menu = getGulper({
  watchOpt: { ignoreInitial: false },
  watchList: {
    pages,
    assets,
    files,
  },
  buildList: {
    pages,
    assets,
    files,
  },
  outputList: {

  },
  // outputStyle: compressed | expanded
  sassOpt: { outputStyle: 'compressed' }
});

// ---------------------------------------------------------------
// > gulp menu
// ---------------------------------------------------------------

exports.menu_pages = menu.buildPages;
exports.menu_assets = menu.buildAssets;
exports.menu_files = menu.buildFiles;

// ---------------------------------------------------------------
// (default task)
// > gulp
// > gulp all
// ---------------------------------------------------------------
exports.default = exports.all = parallel(
  menu.buildPages,
  menu.buildAssets,
  menu.buildFiles,
);

// ---------------------------------------------------------------
// > gulp watch
// ---------------------------------------------------------------
exports.watch = parallel(
  menu.watchPages,
  menu.watchAssets,
  menu.watchFiles,
);