extends ../_templates/demo

block append vars
  include _demo-vars
  -
    header      = `Colors`
    title       = `${header} | ${name}`
    description = `These color page are made for your reference.`
    url         = url+`/texts.html`

    og_title       = title
    og_description = description
    og_url         = url
  //- 

block append style
  //-   |  |
  //- 01234567
  //- fedcba98
  //-   |  |
  style.
    #_header { max-width:960px }
    #_header,
    #_main { margin:0 auto; padding:0 1rem; }

    .line { border-top:1px solid #808080 }

    .gridlines {
      padding-top: 1px;
      height:100%;
      background-image: url('data:image/svg+xml;utf8,<svg width="10" height="10" xmlns="http://www.w3.org/2000/svg"><rect width="9" height="9" fill="none" stroke="none" /><line x1="10" y1="0" x2="10" y2="10" stroke="%23ddd" stroke-width="1" /><line x1="0" y1="10" x2="10" y2="10" stroke="%23ddd" stroke-width="1" /></svg>');
      background-repeat: repeat;
      background-position: 1px 1px;
    }
    ._dark 
    .gridlines {
      background-image: url('data:image/svg+xml;utf8,<svg width="10" height="10" xmlns="http://www.w3.org/2000/svg"><rect width="9" height="9" fill="none" stroke="none" /><line x1="10" y1="0" x2="10" y2="10" stroke="%23222" stroke-width="1" /><line x1="0" y1="10" x2="10" y2="10" stroke="%23222" stroke-width="1" /></svg>');
    }

    #_main .section { width:960px;margin: 1em 0; }

  //- 

block append vars
  -
    function range(n,min,max) { return Math.min(Math.max(n, min),max) }
    function colorRange(n,min=0,max=255) { return range(n,min,max) }
    function hexToInt(hex) { return colorRange(parseInt(hex, 16)); }
    function intToHex(int) { return colorRange(Math.floor(int)).toString(16).padStart(2, '0'); }

    function getRGB(hex) {
      var rgb = [
        hexToInt(hex.substring(0, 2)),
        hexToInt(hex.substring(2, 4)),
        hexToInt(hex.substring(4, 6))
      ];
      return rgb
    }

    function changeHex(hex,lighten=0) {
      var rgb  = getRGB(hex);
      var lit  = range( lighten, 0, 100 )/100;
      var c = [];
      rgb.forEach(function(v, i, a) {
        if (lit < 0.5) {
          v = v *( 2 * lit )
        } else {
          v = v +( 255 - v ) * ( 2 * ( lit - 0.5 ) )
        }
        c[i] = intToHex ( colorRange(v) )
      });
      return c.join('');
    }

    function getColors(i,w='ffffff',y='222222',z='dddddd') {
      var ic = [i];
      var bg = [
        y,
        changeHex( i, 20 ),
        changeHex( i, 30 ),
        changeHex( i, 40 ),
        i,
        changeHex( i, 60 ),
        changeHex( i, 70 ),
        changeHex( i, 80 ),
        z
      ];
      var tc = [
        bg[4],
        bg[5],
        bg[6],
        bg[7],
        w,
        bg[1],
        bg[2],
        bg[3],
        bg[4],
      ];

      return [ ic, bg, tc ];
    }

    //-   |  |
    //- 01234567
    //- fedcba98
    //-   |  |
    var rainbow =
      [ 'DD1111'
      , 'DD8811'
      , 'DDBB00'
      , '88AA00'
      , '009900'
      , '0088AA'
      , '0066CC'
      , '2244DD'
      , '8822ee'
      , '992299'
      , 'CC0066'
      ];
    
    var colors = [
      getColors('222222','b6b6b6'),
      getColors('555555','dddddd'),
      getColors('aaaaaa','eeeeee'),
      getColors('dddddd','2c2c2c'),
      //- getColors('808080'),
    ];

    rainbow.forEach(function(v, i, a) {
      colors.push( getColors(v) );
    });

mixin tables
  style.
    #table .grid { display:grid; }
    #table .i { padding: .5rem 1rem; }
    #table .c { font-size: .8em; border-radius: .5rem }
  #table._text-center._uppercase
    - var r = 0;
    while r < colors.length
      div: +table(r++)

mixin table(r)
  -
    var cols = colors[r][1].length;

  .grid(style=`grid-template-columns: repeat(${cols}, 1fr);`)
    - var c = 0;
    while c < cols
      - var bg = colors[r][1][c];
      - var tc = colors[r][2][c];
      .i(style=`background:#${bg};color:#${tc};`): .c(style=`border:1px solid #${tc}`) #[b #{tc}]#[br]#{bg}
      - c++;
    //- while
  //- grid

  -
    var _darkline  = 49;
    var _lightline = 100-_darkline+.1;
    var _darkness  = intToHex(32);
    var _lightness = intToHex(32);
    var bgc = `bgc-${r}`;
  style.
    .#{bgc} {
      margin:0 auto;
      height: 10px;
    }
    .#{bgc} .gc {
      height:100%;
      background:
      linear-gradient(to right
        , #000000#{_darkness}
        , #000000#{_darkness} #{_darkline}%
        , #00000000 #{_darkline}%
        , #ffffff00 #{_lightline}%
        , #ffffff#{_lightness} #{_lightline}%
        , #ffffff#{_darkness}
      ),
      linear-gradient(to right
        , #000
        , ##{colors[r][0][0]}
        , #fff
      );
    }
  //- 
  div(class=bgc): .gc: .gridlines

block main

  main#_main
    article(style="overflow-x:scroll")

      .section.-rainbow-link
        style.
          #_html .colorlink {
            font-size:13px;
            color:#fff;
            text-shadow: 1px 1px 1px #00000099;
            padding:.2em .5em;
            margin:1em .5em;
            text-decoration:none;
            border-radius:3px;
            }
        ._mv._b._text-center._uppercase
          each c in rainbow
            +a('')(style=`background-color:#${c}`).colorlink #{c}

      .section.-tables: +tables

      .section.-grayscale
        style.
          .bg0 {
            height:10px;
            background:
            linear-gradient(to right
              , #000
              , #fff
            );
          }
        div: +img(homeUrl+"images/grayscale.svg","grayscale.svg","Gray Scale")(style="width:100%")
        .bg0: .gridlines

      .section.-grainbow
        -
          var grainbow =
            [ '#ff0000'
            , '#ff8000'
            , '#ffff00'
            , '#80ff00'
            , '#00ff00'
            , '#00ff80'
            , '#00ffff'
            , '#0080ff'
            , '#0000ff'
            , '#8000ff'
            , '#ff00ff'
            , '#ff0080'
            , '#ff0000'
            ];
          var darkline  = 49;
          var lightline = 100-darkline+.1;
          var darkness  = intToHex(64);
          var lightness = intToHex(64);
        style.
          .cg {
            display:block;
            height: 960px;
            background:
            linear-gradient(to right
              , #000000ff
              , #000000#{darkness} #{darkline}%
              , #00000000 #{darkline}%
              , #ffffff00 #{lightline}%
              , #ffffff#{lightness} #{lightline}%
              , #ffffffff
            ),
            linear-gradient(to bottom,#{grainbow.join(',')});
          }
        ._relative
          .cg: .gridlines
          ._absolute(style="left:50%;margin-left:-14px;")
            +img(homeUrl+"images/colorscale-v.svg","colorscale-v.svg","Color Scale")

    p: hr

    footer#_footer
      p._text-centerx !{copyright}